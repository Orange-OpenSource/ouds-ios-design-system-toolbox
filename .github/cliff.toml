#
# Software Name: OUDS iOS
# SPDX-FileCopyrightText: Copyright (c) Orange SA
# SPDX-License-Identifier: MIT
#
# This software is distributed under the MIT license,
# the text of which is available at https://opensource.org/license/MIT/
# or see the "LICENSE" file for more details.
#
# Authors: See CONTRIBUTORS.txt
# Software description: A SwiftUI components library with code examples for Orange Unified Design System
#

# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]

# Changelog header
header = """
# What's new\n
```
🧬 Core OUDS version: 
🧬 Core Orange version: 
🧬 Core Sosh version: 
🧬 Core Wireframe version: 
🧬 Orange brand version: 
🧬 Orange Business Tools brand version: 
🧬 Sosh brand version: 
🧬 Wireframe brand version: 
```
"""

# Template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% for group, commits in commits | group_by(attribute="group") %}
    ## {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ({{ commit.id }})\
    {% endfor %}
{% endfor %}\n
"""

# Removes the leading and trailing whitespace from the templates
trim = true

[git]

# Parses the commits based on https://www.conventionalcommits.org
conventional_commits = true

# Filters out the commits that are not conventional
filter_unconventional = true

# Processes each line of a commit as an individual commit
split_commits = false

# Regex for parsing and grouping commits
# We assume commits of build and style should not appear in generate release note
commit_parsers = [
  { message = "^feat:", group = "🚀 Features" },
  { message = "^fix:", group = "🐛 Fixes" },
  { message = "^docs:", group = "📖 Docs" },
  { message = "^chore:", group = "🧰 Chore" },
  { message = "^refactor:", group = "🧰 Chore" },
  { message = "^test:", group = "🧰 Chore" },
  { message = "^ci:", group = "🧰 Chore" },
  { message = "^feat!:", group = "💥 Breaking changes" },
  { message = "^fix!:", group = "💥 Breaking changes" },
  { message = "^docs!:", group = "💥 Breaking changes" },
  { message = "^chore!:", group = "💥 Breaking changes" },
  { message = "^refactor!:", group = "💥 Breaking changes" },
  { message = "^test!:", group = "💥 Breaking changes" },
  { message = "^ci!:", group = "💥 Breaking changes" },
]

commit_preprocessors = [
    { pattern = '.*', replace_command = 'git show -s --format=%B $COMMIT_SHA' }
]

# Protects breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# Filters out the commits that are not matched by commit parsers
filter_commits = true

# Regex for matching git tags
tag_pattern = "[0-9].*"

# Regex for skipping tags
skip_tags = "0.1.0-beta.1"

# Regex for ignoring tags
ignore_tags = ""

# Sort the tags topologically
topo_order = false

# Sort the commits inside sections by oldest/newest order
sort_commits = "newest"
